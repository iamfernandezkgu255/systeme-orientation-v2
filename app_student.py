"""
Syst√®me d'Aide √† l'Orientation Professionnelle pour √âtudiants au B√©nin (Version 2)
Application Streamlit principale
"""

import streamlit as st
import json
from typing import Dict, List, Optional
import traceback
import logging
from datetime import datetime

# Import des modules personnalis√©s
from knowledge_base_loader import KnowledgeBaseLoader
from recommendation_logic_student import RecommendationEngine
from llm_interface import LLMInterface

def main():
    """Application principale Streamlit"""
    
    # Configuration de la page
    st.set_page_config(
        page_title="Orientation Professionnelle - B√©nin",
        page_icon="üéì",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Style CSS personnalis√©
    st.markdown("""
    <style>
    .main-title {
        color: #2E8B57;
        text-align: center;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 2rem;
    }
    .section-header {
        color: #4169E1;
        font-size: 1.3rem;
        font-weight: bold;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .recommendation-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #4169E1;
    }
    .university-card {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 3px solid #2E8B57;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Titre principal
    st.markdown('<h1 class="main-title">üéì Syst√®me d\'Orientation Professionnelle du B√©nin</h1>', 
                unsafe_allow_html=True)
    
    # Initialisation des composants avec gestion d'erreur robuste
    if 'knowledge_base' not in st.session_state:
        try:
            with st.spinner("Chargement de la base de connaissances..."):
                st.session_state.knowledge_base = KnowledgeBaseLoader()
                st.session_state.recommendation_engine = RecommendationEngine(st.session_state.knowledge_base)
                st.session_state.llm_interface = LLMInterface()
                
                # Validation de la base de connaissances
                validation = st.session_state.knowledge_base.valider_base_connaissances()
                if validation["erreurs"]:
                    st.error("‚ö†Ô∏è Probl√®mes d√©tect√©s dans la base de connaissances:")
                    for erreur in validation["erreurs"]:
                        st.error(f"‚Ä¢ {erreur}")
                
                if validation["avertissements"]:
                    with st.expander("Avertissements (cliquez pour voir les d√©tails)"):
                        for avertissement in validation["avertissements"]:
                            st.warning(f"‚Ä¢ {avertissement}")
                            
        except FileNotFoundError:
            st.error("‚ùå Fichier de base de connaissances non trouv√©. L'application fonctionne en mode d√©grad√©.")
            st.info("üí° Un fichier exemple va √™tre cr√©√© automatiquement.")
            try:
                st.session_state.knowledge_base = KnowledgeBaseLoader()
                st.session_state.recommendation_engine = RecommendationEngine(st.session_state.knowledge_base)
                st.session_state.llm_interface = LLMInterface()
            except Exception as e:
                st.error(f"Impossible d'initialiser l'application : {str(e)}")
                st.stop()
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'initialisation : {str(e)}")
            st.info("L'application essaie de continuer en mode d√©grad√©...")
            try:
                st.session_state.knowledge_base = None
                st.session_state.recommendation_engine = None
                st.session_state.llm_interface = LLMInterface()
            except:
                st.error("Impossible de d√©marrer l'application.")
                st.stop()
    
    # Sidebar pour les informations du profil
    with st.sidebar:
        st.header("üìã Votre Profil")
        
        # Informations personnelles (optionnelles)
        nom = st.text_input("Nom (optionnel)", placeholder="Votre nom de famille")
        prenom = st.text_input("Pr√©nom (optionnel)", placeholder="Votre pr√©nom")
        
        # Statut √©tudiant
        statut = st.radio(
            "Votre statut actuel :",
            ["√âl√®ve (Futur Bachelier)", "√âtudiant Universitaire"]
        )
        
        # S√©rie du BAC ou fili√®re actuelle
        if statut == "√âl√®ve (Futur Bachelier)":
            series_bac = [
                "A1 (Lettres-Langues)", 
                "A2 (Lettres-Sciences Sociales)", 
                "B (Sciences Sociales)", 
                "C (Math√©matiques-Sciences Physiques)", 
                "D (Math√©matiques-Sciences Naturelles)", 
                "E (Math√©matiques-Techniques)", 
                "EA (√âconomie-Administration)",
                "F1 (√âlectrotechnique)", 
                "F2 (M√©canique G√©n√©rale)", 
                "F3 (√âlectricit√©)", 
                "F4 (G√©nie Civil)",
                "G1 (Secr√©tariat)", 
                "G2 (Comptabilit√©)", 
                "G3 (Commerce)"
            ]
            serie_bac = st.selectbox("Votre s√©rie du BAC :", series_bac)
            filiere_actuelle = None
        else:
            serie_bac = None
            filiere_actuelle = st.text_input(
                "Fili√®re universitaire actuelle :", 
                placeholder="Ex: Licence en Informatique, Master en Gestion..."
            )
        
        # Carri√®re envisag√©e
        carriere_envisagee = st.text_input(
            "Carri√®re que vous envisagez :",
            placeholder="Ex: M√©decin, Ing√©nieur en informatique, Avocat..."
        )
        
        # Bouton d'analyse
        analyser = st.button("üîç Analyser mon profil", type="primary")
        
        # Section debug et test API
        with st.expander("‚öôÔ∏è Outils de diagnostic"):
            if st.button("üîß Tester la connexion API"):
                with st.spinner("Test de la connexion API..."):
                    test_result = st.session_state.llm_interface.tester_connexion()
                    if test_result["success"]:
                        st.success("‚úÖ Connexion API fonctionnelle")
                        st.info(f"R√©ponse: {test_result.get('response', 'N/A')}")
                    else:
                        st.error(f"‚ùå Probl√®me de connexion: {test_result['message']}")
            
            if st.button("üìä Statistiques de la base"):
                if st.session_state.knowledge_base:
                    stats = st.session_state.knowledge_base.get_statistics()
                    st.json(stats)
                else:
                    st.error("Base de connaissances non disponible")
    
    # Zone principale de contenu
    if analyser and carriere_envisagee:
        with st.spinner("Analyse de votre profil en cours..."):
            try:
                # Cr√©ation du profil utilisateur
                profil_utilisateur = {
                    "nom": nom if nom else None,
                    "prenom": prenom if prenom else None,
                    "statut": statut,
                    "serie_bac": serie_bac,
                    "filiere_actuelle": filiere_actuelle,
                    "carriere_envisagee": carriere_envisagee
                }
                
                # G√©n√©ration des recommandations
                if st.session_state.recommendation_engine:
                    recommandations = st.session_state.recommendation_engine.generer_recommandations(profil_utilisateur)
                else:
                    st.warning("‚ö†Ô∏è Moteur de recommandation indisponible. Analyse basique uniquement.")
                    recommandations = {"mode": "degrade"}
                
                # Analyse avec l'IA
                analyse_ia = st.session_state.llm_interface.analyser_profil(
                    profil_utilisateur, 
                    recommandations
                )
                
                # Affichage des r√©sultats
                afficher_resultats(profil_utilisateur, recommandations, analyse_ia)
                
                # Option d'export des r√©sultats
                if st.button("üìÑ Exporter le rapport d'analyse"):
                    rapport = generer_rapport_export(profil_utilisateur, recommandations, analyse_ia)
                    st.download_button(
                        label="üíæ T√©l√©charger le rapport (TXT)",
                        data=rapport,
                        file_name=f"rapport_orientation_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                        mime="text/plain"
                    )
                
            except Exception as e:
                st.error(f"Erreur lors de l'analyse : {str(e)}")
                with st.expander("D√©tails de l'erreur"):
                    st.code(traceback.format_exc())
    
    elif analyser and not carriere_envisagee:
        st.warning("‚ö†Ô∏è Veuillez renseigner la carri√®re que vous envisagez.")
    
    else:
        # Page d'accueil
        afficher_page_accueil()

def afficher_page_accueil():
    """Affiche la page d'accueil avec les instructions"""
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        ### üåü Bienvenue dans votre guide d'orientation !
        
        Cette application vous aide √† :
        - **Analyser** votre choix de carri√®re
        - **D√©couvrir** les universit√©s adapt√©es √† votre profil
        - **Planifier** votre parcours d'√©tudes
        
        ### üìù Comment √ßa marche ?
        
        1. **Remplissez votre profil** dans la barre lat√©rale
        2. **Indiquez votre carri√®re envisag√©e**
        3. **Cliquez sur "Analyser"** pour obtenir vos recommandations
        
        ### üéØ Informations n√©cessaires :
        
        - Votre s√©rie de BAC (si vous √™tes √©l√®ve)
        - Votre fili√®re actuelle (si vous √™tes d√©j√† √©tudiant)
        - La carri√®re professionnelle que vous envisagez
        """)
        
        # Statistiques de la base de connaissances
        try:
            stats = st.session_state.knowledge_base.get_statistics()
            
            st.markdown("### üìä Notre base de donn√©es inclut :")
            
            col_a, col_b, col_c = st.columns(3)
            with col_a:
                st.metric("M√©tiers", stats.get('nb_metiers', 'N/A'))
            with col_b:
                st.metric("Universit√©s", stats.get('nb_universites', 'N/A'))
            with col_c:
                st.metric("Fili√®res", stats.get('nb_filieres', 'N/A'))
                
        except:
            pass

def afficher_resultats(profil: Dict, recommandations: Dict, analyse_ia: str):
    """Affiche les r√©sultats de l'analyse"""
    
    # En-t√™te avec le profil
    st.markdown('<div class="section-header">üë§ Votre Profil</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if profil.get('nom') and profil.get('prenom'):
            st.write(f"**Nom :** {profil['prenom']} {profil['nom']}")
        st.write(f"**Statut :** {profil['statut']}")
        if profil.get('serie_bac'):
            st.write(f"**S√©rie BAC :** {profil['serie_bac']}")
    
    with col2:
        if profil.get('filiere_actuelle'):
            st.write(f"**Fili√®re actuelle :** {profil['filiere_actuelle']}")
        st.write(f"**Carri√®re envisag√©e :** {profil['carriere_envisagee']}")
    
    # Analyse de l'IA
    st.markdown('<div class="section-header">ü§ñ Analyse de votre choix</div>', unsafe_allow_html=True)
    st.markdown('<div class="recommendation-card">', unsafe_allow_html=True)
    st.markdown(analyse_ia)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # V√©rification du mode d√©grad√©
    if recommandations.get("mode") == "degrade":
        st.warning("‚ö†Ô∏è Analyse en mode d√©grad√© - Donn√©es limit√©es disponibles")
        return
    
    # Universit√©s recommand√©es
    if recommandations.get('universites_recommandees'):
        st.markdown('<div class="section-header">üèõÔ∏è Universit√©s et Fili√®res Recommand√©es</div>', 
                   unsafe_allow_html=True)
        
        for universite in recommandations['universites_recommandees']:
            afficher_carte_universite(universite)
    
    # Carri√®res alternatives
    if recommandations.get('carrieres_alternatives'):
        st.markdown('<div class="section-header">üíº Carri√®res Alternatives √† Consid√©rer</div>', 
                   unsafe_allow_html=True)
        
        for i, carriere in enumerate(recommandations['carrieres_alternatives'][:3], 1):
            with st.expander(f"{i}. {carriere.nom_metier}"):
                st.write(f"**Secteur :** {carriere.secteur_activite}")
                st.write(f"**Description :** {carriere.description}")
                if carriere.niveau_demande_marche:
                    st.write(f"**Demande sur le march√© :** {carriere.niveau_demande_marche}")
                if carriere.pertinence_realites_africaines_benin:
                    st.write(f"**Pertinence au B√©nin :** {carriere.pertinence_realites_africaines_benin}")

def afficher_carte_universite(universite_info: Dict):
    """Affiche les informations d'une universit√© sous forme de carte"""
    
    st.markdown('<div class="university-card">', unsafe_allow_html=True)
    
    # En-t√™te de l'universit√©
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown(f"**üèõÔ∏è {universite_info['nom_universite']}**")
        if universite_info.get('sigle'):
            st.markdown(f"*({universite_info['sigle']})*")
    
    with col2:
        statut_color = "üü¢" if universite_info['statut'] == "Public" else "üîµ"
        st.markdown(f"{statut_color} {universite_info['statut']}")
    
    # Informations g√©n√©rales
    if universite_info.get('localisation'):
        st.markdown(f"üìç **Localisation :** {universite_info['localisation']}")
    
    # Fili√®res recommand√©es
    if universite_info.get('filieres_recommandees'):
        st.markdown("**üìö Fili√®res adapt√©es √† votre profil :**")
        
        for filiere in universite_info['filieres_recommandees']:
            with st.expander(f"‚Ä¢ {filiere['nom_filiere']} ({filiere['diplome_delivre']})"):
                
                col_a, col_b = st.columns(2)
                with col_a:
                    st.write(f"**Dur√©e :** {filiere['duree_etudes_ans']} ans")
                    if filiere.get('series_bac_requises'):
                        st.write(f"**S√©ries BAC accept√©es :** {', '.join(filiere['series_bac_requises'])}")
                
                with col_b:
                    if filiere.get('autres_prerequis'):
                        st.write(f"**Autres pr√©requis :** {filiere['autres_prerequis']}")
                
                if filiere.get('description_filiere'):
                    st.write(f"**Description :** {filiere['description_filiere']}")
                
                if filiere.get('metiers_vises_typiques'):
                    st.write(f"**M√©tiers vis√©s :** {', '.join(filiere['metiers_vises_typiques'])}")
    
    st.markdown('</div>', unsafe_allow_html=True)

def generer_rapport_export(profil: Dict, recommandations: Dict, analyse_ia: str) -> str:
    """G√©n√®re un rapport d'analyse exportable"""
    
    rapport = f"""
RAPPORT D'ORIENTATION PROFESSIONNELLE - B√âNIN
G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
================================================

PROFIL √âTUDIANT
---------------
Nom: {profil.get('prenom', '') + ' ' + profil.get('nom', '') if profil.get('nom') else 'Non renseign√©'}
Statut: {profil['statut']}
S√©rie BAC: {profil.get('serie_bac', 'Non applicable')}
Fili√®re actuelle: {profil.get('filiere_actuelle', 'Non applicable')}
Carri√®re envisag√©e: {profil['carriere_envisagee']}

ANALYSE PERSONNALIS√âE
--------------------
{analyse_ia}

"""
    
    if recommandations.get("mode") != "degrade":
        # Universit√©s recommand√©es
        if recommandations.get('universites_recommandees'):
            rapport += "\nUNIVERSIT√âS ET FILI√àRES RECOMMAND√âES\n"
            rapport += "====================================\n"
            
            for i, univ in enumerate(recommandations['universites_recommandees'][:5], 1):
                rapport += f"\n{i}. {univ['nom_universite']} ({univ['statut']})\n"
                rapport += f"   Localisation: {univ.get('localisation', 'Non sp√©cifi√©e')}\n"
                
                if univ.get('filieres_recommandees'):
                    rapport += "   Fili√®res adapt√©es:\n"
                    for filiere in univ['filieres_recommandees'][:3]:
                        rapport += f"   ‚Ä¢ {filiere['nom_filiere']} ({filiere['diplome_delivre']})\n"
                        rapport += f"     Dur√©e: {filiere['duree_etudes_ans']} ans\n"
                        if filiere.get('series_bac_requises'):
                            rapport += f"     S√©ries BAC: {', '.join(filiere['series_bac_requises'])}\n"
                rapport += "\n"
        
        # Carri√®res alternatives
        if recommandations.get('carrieres_alternatives'):
            rapport += "\nCARRI√àRES ALTERNATIVES √Ä CONSID√âRER\n"
            rapport += "==================================\n"
            
            for i, carriere in enumerate(recommandations['carrieres_alternatives'][:3], 1):
                rapport += f"\n{i}. {carriere.nom_metier}\n"
                rapport += f"   Secteur: {carriere.secteur_activite}\n"
                rapport += f"   Description: {carriere.description}\n"
                if carriere.niveau_demande_marche:
                    rapport += f"   Demande march√©: {carriere.niveau_demande_marche}\n"
    
    rapport += f"""

CONSEILS POUR LA SUITE
=====================
1. Consultez les sites web des universit√©s recommand√©es
2. Assistez aux journ√©es portes ouvertes
3. Rencontrez des professionnels du domaine
4. Pr√©parez-vous aux concours d'entr√©e si n√©cessaire
5. Gardez des options de carri√®res alternatives

---
Rapport g√©n√©r√© par le Syst√®me d'Orientation Professionnelle du B√©nin
Pour plus d'informations: contactez votre conseiller d'orientation
"""
    
    return rapport

if __name__ == "__main__":
    main()
